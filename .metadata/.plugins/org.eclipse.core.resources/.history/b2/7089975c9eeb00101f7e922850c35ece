package com.love.apps.BT4U;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

import org.apache.http.HttpResponse;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.app.AlertDialog;
import android.app.ListActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Environment;
import android.os.Vibrator;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;


/*
 * This Class is used to control the favorites page
 * 
 */
public class Favorites extends ListActivity {
	/** Called when the activity is first created. */

	static private String[] Items = null;// used to hold items that are in the list view
	private boolean longClick_ = false; // used to tell the gui if click was long click or short click
	ArrayAdapter<String> adapter_ = null; // holds list for listview
	static Map<Integer, stops> favorites_ = new HashMap<Integer, stops>();// holds all data for each favorite
	AlertDialog.Builder alert = null; //pop window 


	public int timesToShow;
	public static final String PREFS_NAME = "MyPrefsFile";

	
	// oncreate sets up gui initially
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		favorites_.put(0, new stops());
		SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
		timesToShow = settings.getInt("timesShown", 5);

		updateFavorites();

		if(Items == (null) ) 
		{
			Items =  new String[1];
			Items[0] = "EMPTY";
		}

		adapter_ = new ArrayAdapter<String>(this, R.layout.list_item, Items);
		setListAdapter(adapter_);

		ListView lv = getListView();
		lv.setTextFilterEnabled(true);
		//sets up what happens if items are clicked
		lv.setOnItemClickListener(new OnItemClickListener() {


			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,long arg3) {
				if(longClick_) {
					longClick_ = false;
					return;
				}

				showDialog(favorites_.get(arg2));
				updateAdapter();
				makeToast("Getting Stop Data");
			}
		});

		//sets up what happens if items are long clicked
		lv.setOnItemLongClickListener( new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				// TODO Auto-generated method stub
				// Get instance of Vibrator from current Context
				Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);

				// Vibrate for 300 milliseconds
				v.vibrate(50);
				longClick_ = true;

				AlertDialog.Builder alert = getRemoveDialog(favorites_, arg2);
				alert.show();
				
				



				
				return false;
			}
		});
	}

	//updates the list adapter if a stop is added or removed
	protected void updateAdapter() {
		// TODO Auto-generated method stub
		adapter_ = new ArrayAdapter<String>(this, R.layout.list_item, Items);
		setListAdapter(adapter_);
		

		adapter_.notifyDataSetChanged();
		
		
	}

	//shows the stop times in new window for giiven stop
	private void showDialog(stops s)
	{

		String url =  "http://www.bt4u.org//BT4U_WebService.asmx/GetNextDepartures";//BT4U_WebService.asmx/GetNextDepartures?routeShortName=" + array_spinner[spinner_.getSelectedItemPosition()] +  "&stopCode=" + CurrentStops_[spinner2_.getSelectedItemPosition()];  + spinner_.getSelectedItem();

		Map<String, String> args = new HashMap<String, String>();
		args.put("routeShortName", s.shortRoute);
		args.put("StopCode", s.stopCode);
		//view2_.append("\n" + url + "  " +  array_spinner[spinner_.getSelectedItemPosition()] + "\n");
		alert = new AlertDialog.Builder(this);

		HttpUtils.get().doPost(url, args, new HttpCallback(){

			@Override
			public void onResponse(HttpResponse resp) {


				String data;

				try {
					data = printXml(resp);




					alert.setTitle("Next Stop Times");
					alert.setMessage(data);

					// Set an EditText view to get user input 

					alert.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int whichButton) {
							// String value = input.getText().toString();
							// Do something with value!
						}
					});
					alert.show();
				} catch (XmlPullParserException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}








			}



			@Override
			public void onError(Exception e) {
				// TODO Auto-generated method stub

			}


		});


	}
	
	//puts up toast notification that says message
	public void makeToast(String message)
	{
		Toast.makeText(getApplicationContext(), message,
				Toast.LENGTH_SHORT).show();
	}

	//shows remove dialog for given stop
	private AlertDialog.Builder getRemoveDialog(final Map<Integer, stops> favorites, final int index)
	{

		AlertDialog.Builder alert = new AlertDialog.Builder(this);

		alert.setTitle("Remove Favorite");
		alert.setMessage("would you like to remove this stop" + "?");

		// Set an EditText view to get user input 

		alert.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {
				// String value = input.getText().toString();
				// Do something with value!
				
				
				
					favorites.remove(index);

					Object[] keys = favorites.keySet().toArray();
					String fileData = "";
					for(int i = 0; i < favorites.size(); i++)
					{
						stops temp = favorites.get(keys[i]);
						fileData += temp.name + "," +
						temp.shortRoute + "," + 	
						temp.location + "," +
						temp.stopCode + "\n"; 	


					}

					String path =  Environment.getExternalStorageDirectory() + "/BT4U/";


					//view2_.setText("");
					File root = new File(path);
					//view2_.setText("I AM HERE ");


					root.mkdirs();

					try {
					File f = new File(root, "favorites.txt");
					if(!f.exists())
					{
						//view2_.setText("now I am here");
						FileOutputStream fos;

					
							fos = new FileOutputStream(f);
						

							fos.close();
						

					
					}


					FileWriter writer;

					writer = new FileWriter(f);


					writer.write(fileData);

					writer.close();
					
					
					
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					updateFavorites();
					updateAdapter();
					makeToast("Stop was removed");
					//view2_.append("\n HELLO I AM CONTENT" + content);


				}
		

		
		});
		alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

			}
		});


		return alert;

	}

	//refreshes the items list
	private void refreshItems() {
		// TODO Auto-generated method stub
		if(favorites_.isEmpty()) return;

		Items = new String[favorites_.size()];
		for (int i = 0; i < favorites_.size(); i++)
		{
			stops temp = favorites_.get(i);
			Items[i]  = "Route: " + temp.name + "\nLocation:" + temp.location.split("-")[1];
		}
		//setListAdapter(new ArrayAdapter<String>(this, R.layout.list_item, Items));
		

	}

	//updates entire favorites list
	public void updateFavorites()
	{

		try {
			String path = Environment.getExternalStorageDirectory().getCanonicalPath() + "/BT4U/";


			//view2_.setText("");
			File root = new File(path);


			root.mkdirs();


			File f = new File(root, "favorites.txt");
			if(!f.exists())
			{
				//view2_.setText("now I am here");
				FileOutputStream fos = new FileOutputStream(f);
				fos.close();

			}



			FileReader r = new FileReader(f);
			BufferedReader br = new BufferedReader(r);



			// Open the file that is the first
			// command line parameter


			String strLine;
			// Read File Line By Line


			int i = 0;
			favorites_.clear();
			while ((strLine = br.readLine()) != null) {
				// Print the content on the console
				//String[] allWords;


				StringTokenizer st = new StringTokenizer(strLine, ",");
				stops temp = new stops();
				temp.name = st.nextToken();
				temp.shortRoute = st.nextToken();
				temp.location = st.nextToken();
				temp.stopCode = st.nextToken();
				favorites_.put(i, temp);
				i++;
			}

			r.close();


		} catch (Exception e) {// Catch exception if any
			//System.err.println("Error: " + e.getMessage());
		}

		refreshItems();






	}



	@Override
	protected void onResume() {
		super.onResume();

		adapter_ = new ArrayAdapter<String>(this, R.layout.list_item, Items);
		setListAdapter(adapter_);


	}


	//creates options menu
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.favorites_menu, menu);
		return true;
	}

	//handles menu items selection
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle item selection

		Intent i = new Intent(getApplicationContext(), aboutMe.class);
		startActivity(i);
		return true;
	}

	//returns stop times from xml file
	public String printXml(HttpResponse resp) throws XmlPullParserException, IOException, InterruptedException
	{

		//wait();
		XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
		factory.setNamespaceAware(true);
		XmlPullParser xpp = factory.newPullParser();


		xpp.setInput( new StringReader ( HttpUtils.get().responseToString( resp ) ) );
		int eventType = xpp.getEventType();

		String temp = "";

		int i = 0;

		//while(eventType != XmlPullParser.END_DOCUMENT){
		while(i < timesToShow)
		{
			if(eventType == XmlPullParser.START_DOCUMENT) {
				temp += "";
				//theView.setText("");//Start document");
			} else if(eventType == XmlPullParser.START_TAG) {

				String name = xpp.getName();
				if(name.equalsIgnoreCase("patternpointname"))
				{

					//temp += "Stop Location:    ";
					xpp.next();
					
					//temp += xpp.getText() + "\n";

				}
				if(name.equalsIgnoreCase("adjusteddeparturetime"))
				{

					//temp += "Arrival Time:    ";
					xpp.next();
					temp += xpp.getText() + "\n";		
					i++;


				}
			} else if(eventType == XmlPullParser.END_DOCUMENT) {
				i = timesToShow;
			} else if(eventType == XmlPullParser.TEXT) {
				temp += ("");


			}
			eventType = xpp.next();
		}

		if(temp.equals(""))
		{
			temp = ("No route information available.");
		}


		return temp;
	}






	//class for holding stop information

	class stops{
		public String name = null;
		public String location = null;
		public String stopCode = null;
		public String shortRoute = null;

	}

}

